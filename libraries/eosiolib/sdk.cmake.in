cmake_minimum_required(VERSION 3.4.0)

if(NOT DEFINED WASI_SDK_PREFIX AND DEFINED ENV{WASI_SDK_PREFIX})
    set(WASI_SDK_PREFIX $ENV{WASI_SDK_PREFIX})
endif()

if(NOT DEFINED WASI_SDK_PREFIX)
    message(FATAL_ERROR WASI_SDK_PREFIX is not defined)
endif()

if(NOT DEFINED EDEN_SDK_PREFIX AND DEFINED ENV{EDEN_SDK_PREFIX})
    set(EDEN_SDK_PREFIX $ENV{EDEN_SDK_PREFIX})
endif()

if(NOT DEFINED EDEN_SDK_PREFIX)
    message(FATAL_ERROR EDEN_SDK_PREFIX is not defined)
endif()

set(CMAKE_SYSTEM_NAME WASI)
set(CMAKE_SYSTEM_VERSION 1)
set(CMAKE_SYSTEM_PROCESSOR wasm32)
set(triple wasm32-wasi)
set(CMAKE_EXECUTABLE_SUFFIX_C .wasm)
set(CMAKE_EXECUTABLE_SUFFIX_CXX .wasm)

set(CMAKE_C_COMPILER ${WASI_SDK_PREFIX}/bin/clang)
set(CMAKE_CXX_COMPILER ${WASI_SDK_PREFIX}/bin/clang++)
set(CMAKE_AR ${WASI_SDK_PREFIX}/bin/llvm-ar)
set(CMAKE_RANLIB ${WASI_SDK_PREFIX}/bin/llvm-ranlib)
set(CMAKE_C_COMPILER_TARGET ${triple})
set(CMAKE_CXX_COMPILER_TARGET ${triple})

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

function(use_eosio_core_libs name)
    target_include_directories(${name} PUBLIC
        ${EDEN_SDK_PREFIX}/abieos/include
        ${EDEN_SDK_PREFIX}/boost/include
        ${EDEN_SDK_PREFIX}/eosio/core/include
    )
    target_compile_options(${name} PUBLIC -fno-exceptions -D__eosio_cdt__)
endfunction

function(use_contract_libs name)
    use_eosio_core_libs(${name})
    target_include_directories(${name} PUBLIC
        ${EDEN_SDK_PREFIX}/eosio/contracts/include
    )
endfunction

function(is_contract_simple_malloc name)
    use_contract_libs(${name})
    target_link_libraries(${name} PUBLIC
        -L${EDEN_SDK_PREFIX/lib-wasm}
        -leosio-core
        -leosio-contract-base
        -lc++
        -lc++abi
        -lc-no-malloc
        -lsimple-malloc
        -leosio-contracts-wasi-polyfill
        ${WASI_SDK_PREFIX}/lib/clang/11.0.0/lib/wasi/libclang_rt.builtins-wasm32.a
    )
    target_link_options(${name} PUBLIC
        -Wl,--stack-first
        -Wl,--entry,apply
        -Wl,-z,stack-size=8192
        -nostdlib
    )
    string(TOLOWER ${CMAKE_BUILD_TYPE} build_type_lower)
    if(build_type_lower STREQUAL release OR build_type_lower STREQUAL minsizerel)
        target_link_options(${name} PUBLIC -Wl,--strip-all)
    endif()
endfunction

function(is_contract_full_malloc name)
    use_contract_libs(${name})
    target_link_libraries(${name} PUBLIC
        -L${EDEN_SDK_PREFIX/lib-wasm}
        -leosio-core
        -leosio-contract-base
        -lc++
        -lc++abi
        -lc
        -leosio-contracts-wasi-polyfill
        ${WASI_SDK_PREFIX}/lib/clang/11.0.0/lib/wasi/libclang_rt.builtins-wasm32.a
    )
    target_link_options(${name} PUBLIC
        -Wl,--stack-first
        -Wl,--entry,apply
        -Wl,-z,stack-size=8192
        -nostdlib
    )
    string(TOLOWER ${CMAKE_BUILD_TYPE} build_type_lower)
    if(build_type_lower STREQUAL release OR build_type_lower STREQUAL minsizerel)
        target_link_options(${name} PUBLIC -Wl,--strip-all)
    endif()
endfunction

function(is_eden_test name)
    use_eosio_core_libs(${name})
    target_link_libraries(${name} PUBLIC
        -L${EDEN_SDK_PREFIX/lib-wasm}
        -leosio-core
        -leden-testlib
        ${WASI_SDK_PREFIX}/lib/clang/11.0.0/lib/wasi/libclang_rt.builtins-wasm32.a
    )
endfunction
